package com.division.rsaencrypter.core;

import java.io.File;
import java.security.KeyPair;
import java.security.PrivateKey;
import java.security.PublicKey;
import javax.swing.JOptionPane;
import javax.xml.bind.DatatypeConverter;

/**
 *
 * @author Evan
 */
public class TextUI extends javax.swing.JFrame {

    private File rsaDir;

    /**
     * Creates new form UI
     */
    public TextUI() {
        initComponents();
        rsaDir = new File(System.getProperty("user.dir"), "rsa");
        if (!rsaDir.exists()) {
            rsaDir.mkdirs();
        }
        initKeyPair();
    }

    public File getRSADir(){
        return rsaDir;
    }

    private void initKeyPair() {
        try {
            RSAFileIO.load(rsaDir);
            RSAFileIO.loadPrivateKey(rsaDir);
        } catch (Exception ex) {
            try {
                KeyPair keys = RSAKeygen.generate(2048);
                RSAFileIO.save(rsaDir, keys);
                JOptionPane.showMessageDialog(this, "Unable to find an intact KeyPair, so we made you a new one :)", "Generated KeyPair!", JOptionPane.INFORMATION_MESSAGE);
            } catch (Exception ex1) {
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        encryptOut = new javax.swing.JTextArea();
        encryptSrc = new javax.swing.JTextField();
        encryptBtn = new javax.swing.JButton();
        srcLbl = new javax.swing.JLabel();
        decryptBtn = new javax.swing.JButton();
        encrypLbl = new javax.swing.JLabel();
        fileEncrypterBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Encrypt Text");

        encryptOut.setColumns(20);
        encryptOut.setLineWrap(true);
        encryptOut.setRows(5);
        encryptOut.setWrapStyleWord(true);
        jScrollPane1.setViewportView(encryptOut);

        encryptBtn.setText("Encrypt");
        encryptBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encryptBtnActionPerformed(evt);
            }
        });

        srcLbl.setText("Text to Encrypt:");

        decryptBtn.setText("Decrypt");
        decryptBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decryptBtnActionPerformed(evt);
            }
        });

        encrypLbl.setText("Encrypted Text:");

        fileEncrypterBtn.setText("Switch to File");
        fileEncrypterBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileEncrypterBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(encryptSrc)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(encryptBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(decryptBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(encrypLbl)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(srcLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(fileEncrypterBtn)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(srcLbl)
                    .addComponent(fileEncrypterBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(encryptSrc, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(encryptBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(decryptBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(encrypLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void encryptBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encryptBtnActionPerformed
        //Encryption  code
        if (!encryptSrc.getText().isEmpty()) {
            String text = encryptSrc.getText();
            try {
                PublicKey publicKey = RSAFileIO.load(rsaDir);
                byte[] bytes = RSA.encrypt(text.getBytes(), publicKey);
                encryptOut.setText(DatatypeConverter.printBase64Binary(bytes));
            } catch (Exception ex) {
                initKeyPair();
            }
        }
    }//GEN-LAST:event_encryptBtnActionPerformed

    private void decryptBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decryptBtnActionPerformed
        // Decryption code
        if (!encryptOut.getText().isEmpty()) {
            try {
                String data = encryptOut.getText();
                byte[] bytes = DatatypeConverter.parseBase64Binary(data);
                PrivateKey privateKey = RSAFileIO.loadPrivateKey(rsaDir);
                byte[] decrypted = RSA.decrypt(bytes, privateKey);
                encryptOut.setText(readString(decrypted, 0));
            } catch (Exception ex) {
                initKeyPair();
            }
        }

    }//GEN-LAST:event_decryptBtnActionPerformed

    private void fileEncrypterBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileEncrypterBtnActionPerformed
        FileUI fUI = new FileUI(this);
        fUI.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_fileEncrypterBtnActionPerformed

    private String readString(byte[] data, int offset) {
        StringBuilder builder = new StringBuilder();
        for (int i = offset; i < data.length; i++) {
            builder.append((char) data[i]);
        }
        return builder.toString();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TextUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TextUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TextUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TextUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TextUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton decryptBtn;
    private javax.swing.JLabel encrypLbl;
    private javax.swing.JButton encryptBtn;
    private javax.swing.JTextArea encryptOut;
    private javax.swing.JTextField encryptSrc;
    private javax.swing.JButton fileEncrypterBtn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel srcLbl;
    // End of variables declaration//GEN-END:variables
}
